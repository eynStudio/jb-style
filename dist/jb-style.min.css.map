{"version":3,"sources":["../src/utils/_text.scss","../src/mixins/_breakpoints.scss","../src/utils/_display.scss","../src/utils/_flex.scss","../src/utils/_background.scss","../src/utils/_position.scss","../src/utils/_borders.scss"],"names":[],"mappings":"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","sourcesContent":["// Color\n\n.text-white {\n  color: $white !important;\n}\n\n@each $color, $value in $theme-colors {\n  .text-#{$color} {\n    color: $color !important;\n  }\n}\n\n// Alignment\n\n.text-justify {\n  text-align: justify !important;\n}\n.text-nowrap {\n  white-space: nowrap !important;\n}\n\n// Responsive alignment\n\n@each $breakpoint in map-keys($grid-breakpoints) {\n  @include media-breakpoint-up($breakpoint) {\n    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);\n\n    .text#{$infix}-left {\n      text-align: left !important;\n    }\n    .text#{$infix}-right {\n      text-align: right !important;\n    }\n    .text#{$infix}-center {\n      text-align: center !important;\n    }\n  }\n}\n\n// Transformation\n\n.text-lowercase {\n  text-transform: lowercase !important;\n}\n.text-uppercase {\n  text-transform: uppercase !important;\n}\n.text-capitalize {\n  text-transform: capitalize !important;\n}\n\n// Weight and italics\n\n.font-weight-light {\n  font-weight: $font-weight-light !important;\n}\n.font-weight-lighter {\n  font-weight: $font-weight-lighter !important;\n}\n.font-weight-normal {\n  font-weight: $font-weight-normal !important;\n}\n.font-weight-bold {\n  font-weight: $font-weight-bold !important;\n}\n.font-weight-bolder {\n  font-weight: $font-weight-bolder !important;\n}\n.font-italic {\n  font-style: italic !important;\n}\n\n.fw300 {\n  font-weight: 300;\n}\n.fw400 {\n  font-weight: 400;\n}\n.fw500 {\n  font-weight: 500;\n}\n.fw600 {\n  font-weight: 600;\n}\n.fw700 {\n  font-weight: 700;\n}\n\n@each $color, $value in $theme-colors {\n  .text-#{$color} {\n    color: $value !important;\n  }\n}\n\n.text-body {\n  color: $body-color !important;\n}\n","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n    $n: index($breakpoint-names, $name);\n    @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n  }\n  \n  // Minimum breakpoint width. Null for the smallest (first) breakpoint.\n  //\n  //    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n  //    576px\n  @function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n    $min: map-get($breakpoints, $name);\n    @return if($min != 0, $min, null);\n  }\n  \n  // Maximum breakpoint width. Null for the largest (last) breakpoint.\n  // The maximum value is calculated as the minimum of the next one less 0.02px\n  // to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n  // See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n  // Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n  // See https://bugs.webkit.org/show_bug.cgi?id=178261\n  //\n  //    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n  //    767.98px\n  @function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n    $next: breakpoint-next($name, $breakpoints);\n    @return if($next, breakpoint-min($next, $breakpoints) - .02px, null);\n  }\n  \n  // Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n  // Useful for making responsive utilities.\n  //\n  //    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n  //    \"\"  (Returns a blank string)\n  //    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n  //    \"-sm\"\n  @function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n    @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n  }\n  \n  // Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n  // Makes the @content apply to the given breakpoint and wider.\n  @mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n    $min: breakpoint-min($name, $breakpoints);\n    @if $min {\n      @media (min-width: $min) {\n        @content;\n      }\n    } @else {\n      @content;\n    }\n  }\n  \n  // Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n  // Makes the @content apply to the given breakpoint and narrower.\n  @mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n    $max: breakpoint-max($name, $breakpoints);\n    @if $max {\n      @media (max-width: $max) {\n        @content;\n      }\n    } @else {\n      @content;\n    }\n  }\n  \n  // Media that spans multiple breakpoint widths.\n  // Makes the @content apply between the min and max breakpoints\n  @mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n    $min: breakpoint-min($lower, $breakpoints);\n    $max: breakpoint-max($upper, $breakpoints);\n  \n    @if $min != null and $max != null {\n      @media (min-width: $min) and (max-width: $max) {\n        @content;\n      }\n    } @else if $max == null {\n      @include media-breakpoint-up($lower, $breakpoints) {\n        @content;\n      }\n    } @else if $min == null {\n      @include media-breakpoint-down($upper, $breakpoints) {\n        @content;\n      }\n    }\n  }\n  \n  // Media between the breakpoint's minimum and maximum widths.\n  // No minimum for the smallest breakpoint, and no maximum for the largest one.\n  // Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n  @mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n    $min: breakpoint-min($name, $breakpoints);\n    $max: breakpoint-max($name, $breakpoints);\n  \n    @if $min != null and $max != null {\n      @media (min-width: $min) and (max-width: $max) {\n        @content;\n      }\n    } @else if $max == null {\n      @include media-breakpoint-up($name, $breakpoints) {\n        @content;\n      }\n    } @else if $min == null {\n      @include media-breakpoint-down($name, $breakpoints) {\n        @content;\n      }\n    }\n  }","// stylelint-disable declaration-no-important\n\n//\n// Utilities for common `display` values\n//\n\n@each $breakpoint in map-keys($grid-breakpoints) {\n    @include media-breakpoint-up($breakpoint) {\n      $infix: breakpoint-infix($breakpoint, $grid-breakpoints);\n  \n      .d#{$infix}-none         { display: none !important; }\n      .d#{$infix}-inline       { display: inline !important; }\n      .d#{$infix}-inline-block { display: inline-block !important; }\n      .d#{$infix}-block        { display: block !important; }\n      .d#{$infix}-table        { display: table !important; }\n      .d#{$infix}-table-row    { display: table-row !important; }\n      .d#{$infix}-table-cell   { display: table-cell !important; }\n      .d#{$infix}-flex         { display: flex !important; }\n      .d#{$infix}-inline-flex  { display: inline-flex !important; }\n    }\n  }\n  \n  \n  //\n  // Utilities for toggling `display` in print\n  //\n  \n  @media print {\n    .d-print-none         { display: none !important; }\n    .d-print-inline       { display: inline !important; }\n    .d-print-inline-block { display: inline-block !important; }\n    .d-print-block        { display: block !important; }\n    .d-print-table        { display: table !important; }\n    .d-print-table-row    { display: table-row !important; }\n    .d-print-table-cell   { display: table-cell !important; }\n    .d-print-flex         { display: flex !important; }\n    .d-print-inline-flex  { display: inline-flex !important; }\n  }","\n@each $breakpoint in map-keys($grid-breakpoints) {\n    @include media-breakpoint-up($breakpoint) {\n      $infix: breakpoint-infix($breakpoint, $grid-breakpoints);\n  \n      .flex#{$infix}-row            { flex-direction: row !important; }\n      .flex#{$infix}-column         { flex-direction: column !important; }\n      .flex#{$infix}-row-reverse    { flex-direction: row-reverse !important; }\n      .flex#{$infix}-column-reverse { flex-direction: column-reverse !important; }\n  \n      .flex#{$infix}-wrap         { flex-wrap: wrap !important; }\n      .flex#{$infix}-nowrap       { flex-wrap: nowrap !important; }\n      .flex#{$infix}-wrap-reverse { flex-wrap: wrap-reverse !important; }\n      .flex#{$infix}-fill         { flex: 1 1 auto !important; }\n      .flex#{$infix}-grow-0       { flex-grow: 0 !important; }\n      .flex#{$infix}-grow-1       { flex-grow: 1 !important; }\n      .flex#{$infix}-shrink-0     { flex-shrink: 0 !important; }\n      .flex#{$infix}-shrink-1     { flex-shrink: 1 !important; }\n  \n      .justify-content#{$infix}-start   { justify-content: flex-start !important; }\n      .justify-content#{$infix}-end     { justify-content: flex-end !important; }\n      .justify-content#{$infix}-center  { justify-content: center !important; }\n      .justify-content#{$infix}-between { justify-content: space-between !important; }\n      .justify-content#{$infix}-around  { justify-content: space-around !important; }\n  \n      .align-items#{$infix}-start    { align-items: flex-start !important; }\n      .align-items#{$infix}-end      { align-items: flex-end !important; }\n      .align-items#{$infix}-center   { align-items: center !important; }\n      .align-items#{$infix}-baseline { align-items: baseline !important; }\n      .align-items#{$infix}-stretch  { align-items: stretch !important; }\n  \n      .align-content#{$infix}-start   { align-content: flex-start !important; }\n      .align-content#{$infix}-end     { align-content: flex-end !important; }\n      .align-content#{$infix}-center  { align-content: center !important; }\n      .align-content#{$infix}-between { align-content: space-between !important; }\n      .align-content#{$infix}-around  { align-content: space-around !important; }\n      .align-content#{$infix}-stretch { align-content: stretch !important; }\n  \n      .align-self#{$infix}-auto     { align-self: auto !important; }\n      .align-self#{$infix}-start    { align-self: flex-start !important; }\n      .align-self#{$infix}-end      { align-self: flex-end !important; }\n      .align-self#{$infix}-center   { align-self: center !important; }\n      .align-self#{$infix}-baseline { align-self: baseline !important; }\n      .align-self#{$infix}-stretch  { align-self: stretch !important; }\n    }\n  }","@each $color, $value in $theme-colors {\n  .bg-#{$color} {\n    background-color: $value !important;\n  }\n}\n\n.bg-fff {\n  background-color: #fff !important;\n}\n\n.bg-white {\n  background-color: $white !important;\n}\n\n.bg-none {\n  background-color: transparent !important;\n}\n.bg-body {\n  background-color: $body-bg !important;\n}\n","// Common values\n\n// Sass list not in variables since it's not intended for customization.\n// stylelint-disable-next-line scss/dollar-variable-default\n$positions: static, relative, absolute, fixed, sticky;\n\n@each $position in $positions {\n  .position-#{$position} { position: $position !important; }\n}\n\n// Shorthand\n\n.fixed-top {\n  position: fixed;\n  top: 0;\n  right: 0;\n  left: 0;\n  z-index: $zindex-fixed;\n}\n\n.fixed-bottom {\n  position: fixed;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: $zindex-fixed;\n}","//\n// Border\n//\n\n.border         { border: $border-width solid $border-color !important; }\n.border-top     { border-top: $border-width solid $border-color !important; }\n.border-right   { border-right: $border-width solid $border-color !important; }\n.border-bottom  { border-bottom: $border-width solid $border-color !important; }\n.border-left    { border-left: $border-width solid $border-color !important; }\n\n.border-0        { border: 0 !important; }\n.border-top-0    { border-top: 0 !important; }\n.border-right-0  { border-right: 0 !important; }\n.border-bottom-0 { border-bottom: 0 !important; }\n.border-left-0   { border-left: 0 !important; }\n\n@each $color, $value in $theme-colors {\n  .border-#{$color} {\n    border-color: $value !important;\n  }\n}\n\n.border-white {\n  border-color: $white !important;\n}\n\n//\n// Border-radius\n//\n\n.rounded {\n  border-radius: $border-radius !important;\n}\n.rounded-top {\n  border-top-left-radius: $border-radius !important;\n  border-top-right-radius: $border-radius !important;\n}\n.rounded-right {\n  border-top-right-radius: $border-radius !important;\n  border-bottom-right-radius: $border-radius !important;\n}\n.rounded-bottom {\n  border-bottom-right-radius: $border-radius !important;\n  border-bottom-left-radius: $border-radius !important;\n}\n.rounded-left {\n  border-top-left-radius: $border-radius !important;\n  border-bottom-left-radius: $border-radius !important;\n}\n\n.rounded-circle {\n  border-radius: 50% !important;\n}\n\n.rounded-0 {\n  border-radius: 0 !important;\n}"]}